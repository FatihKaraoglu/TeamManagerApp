@using TeamManager.Client.Services.DepartmentService
@using TeamManager.Client.Services.UserService
@using TeamManager.Shared.DTO
@using TeamManager.Shared.ViewClass
@inject IUserService UserService
@inject IDepartmentService DepartmentService


<MudDialog>
    <DialogContent>
        @if (DataLoaded)
        {
            <MudDropContainer T="UserDropItem" Items="Employees" ItemsSelector="@((item,dropzone) => item.Identifier == dropzone)" Class="d-flex flex-wrap flex-grow-1">
                <ChildContent>
                    <MudDropZone T="EmployeeDTO" Identifier="Unassigned" Class="rounded mud-background-gray pa-6 ma-8 flex-grow-1">
                        <MudText Typo="Typo.h6" Class="mb-4">Unassigned</MudText>
                    </MudDropZone>

                    @if (Departments != null && Departments.Any())
                    {
                        @foreach (var department in Departments)
                        {
                            <MudDropZone T="EmployeeDTO" Identifier="@department.Name" Class="rounded mud-background-gray pa-6 ma-8 flex-grow-1">
                                <MudText Typo="Typo.h6" Class="mb-4">@department.Name</MudText>
                            </MudDropZone>
                        }
                    }
                </ChildContent>
                <ItemRenderer>
                    <MudPaper Elevation="25" Class="pa-4 my-4">@context.Identifier</MudPaper>
                </ItemRenderer>
            </MudDropContainer>
        }
    </DialogContent>
    <DialogActions>

    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    public List<Department> Departments { get; set; } = new List<Department>();

    public List<UserDropItem> Employees { get; set; } = new List<UserDropItem>();

    public bool DataLoaded { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        DataLoaded = true;

        StateHasChanged();

    }

    private async Task LoadData()
    {
        /*var responseDepartment = await DepartmentService.GetDepartments();
        if (responseDepartment.Success)
        {
            Departments = responseDepartment.Data.ToList();
        }*/

        var response = await UserService.GetAllUsers();
        if (response.Success)
        {
            List<UserDTO> users = response.Data.ToList();
            await CreateDropItems(users);
        }
    }


    public async Task CreateDropItems(List<UserDTO> userDTOs)
    {
        Employees.Clear();
        foreach (var user in userDTOs)
        {

            Console.WriteLine("Im here");
                 Employees.Add
                 (
                     new UserDropItem(user, "Unassigned")
                );
            // if (user.DepartmentId == null)
            // {
            //     Console.WriteLine("Im here");
            //     Employees.Add
            //     (
            //         new UserDropItem(user, "Unassigned")
            //     );
            // }
            // else
            // {
            //     Employees.Add
            //     (
            //         new UserDropItem(user, user.Department.Name)
            //     );
            // }
        }
    }

    private void ItemUpdated(MudItemDropInfo<UserDropItem> dropItem)
    {
        dropItem.Item.Identifier = dropItem.DropzoneIdentifier;
    }
}