@using System.Security.Claims
@inject AuthenticationStateProvider AuthStateProvider
@inherits LayoutComponentBase;

<MudThemeProvider Theme=@_mixedTheme/>
<MudDialogProvider FullWidth="true" MaxWidth="@MaxWidth.ExtraLarge" CloseButton="false" />
<MudSnackbarProvider />

<style>
    /* Custom CSS to disable highlighting effect for the link tag */
    .disable-highlight a:hover {
        color: inherit !important; /* Use the default text color */
    }
</style>

<MudLayout>
    <MudAppBar Elevation="0">
    </MudAppBar>
    <MudDrawer Open="true">
        <MudNavMenu Rounded="true" Color="Color.Primary" class="disable-highlight pa-2">
          
            <MudText Typo="Typo.h6"  Class="my-4 mx-3">Team Manager</MudText>
            <MudDivider Class="my-2" />
            <MudNavLink Href="/hr-services" Icon="@Icons.Material.Filled.Badge">HR-Services</MudNavLink>
            <MudDivider/>
            <MudNavLink Href="/login" Icon="@Icons.Material.Filled.Login">Login</MudNavLink>
            <MudNavLink Href="/register" Icon="@Icons.Material.Filled.AppRegistration">Register</MudNavLink>
            @if (authorized)
            {
                <MudDivider/>
                <MudNavLink Href="/moderation" Icon="@Icons.Material.Filled.AddModerator">Moderation</MudNavLink>
            }

        </MudNavMenu>
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;

    bool authorized = false;

    protected override async Task OnInitializedAsync()
    {
        string role = (await AuthStateProvider.GetAuthenticationStateAsync())
            .User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role).Value;
        if (role.Contains("Moderator") || role.Contains("Admin"))
        {
            authorized = true;
        }
    }

    public MudTheme _mixedTheme { get; set; } = new MudTheme()
		{

			Palette = new Palette
			{
				Primary = Colors.Amber.Darken2, // Set your primary color
				Secondary = Colors.Red.Default, // Set your secondary color
                Background = "#e9e9e9", // Set background color
				Surface = Colors.Grey.Lighten4, // Set surface color
				AppbarBackground = "#ffffff", // Set appbar background color
                DrawerBackground = "#1d1d1d",
                DrawerText = "#e0e0e0", // Example drawer text color
				DrawerIcon = "#ffffff", // Example drawer icon color
				TextPrimary = "#000000",
                TextSecondary = "#a5a2a9",
                TextDisabled = "#78777c",
                Info = Colors.Green.Lighten2,

			},

			LayoutProperties = new LayoutProperties
			{
				DrawerWidthLeft = "240px",
                AppbarHeight = "60px"
			},
            Typography = new Typography()
            {
                Default = new Default()
                {
                    FontFamily = new []{"Lato"}
                }
            }
		};

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }


}