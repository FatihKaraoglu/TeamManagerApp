@using TeamManager.Client.Services.VacationService
@using TeamManager.Shared.DTO
@inject IVacationService VacationService;
@inject ISnackbar Snackbar

<MudDialog >
    <DialogContent>
        @if (dataLoaded)
        {
            <div class="d-flex flex-row">
                @if (Elements.Any())
                {
                    <MudDataGrid Items="@Elements" Style="height: 500px; width: 70%" Virtualize="true" Height="500px" FixedHeader="true">
                        <Columns>
                            <PropertyColumn Property="x => x.StartDate" Format="d" />
                            <PropertyColumn Property="x => x.EndDate" Format="d" />
                            <PropertyColumn Property="x => x.Reason" Title="Reason" />
                            <PropertyColumn Property="x => x.Status" Title="Status" />

                        </Columns>
                    </MudDataGrid>

                }
                else
                {
                    <h1>No elements</h1>
                }
                <div style="width: 30%">
                    <MudContainer MaxWidth="MaxWidth.Large">
                        <h2>Vacation Balance</h2>
                        <!-- Display vacation balance here -->
                        <p>Current Vacation Balance: @remainingBalance days</p>
                        <div class="mt-3">
                            <!-- MudDateRangePicker with top margin -->
                            <MudDateRangePicker @ref="dateRangePicker" Label="Vacation Request" Clearable="true" PlaceholderStart="Start Date" PlaceholderEnd="End Date" />
                        </div>

                        <div class="mt-3">
                            <!-- Submit button with top margin -->
                            <MudButton Color="Color.Primary" OnClick="Submit" class="align-self-end">Request Vacation</MudButton>
                        </div>
                    </MudContainer>
                </div>
            </div>
        } else
        {
            <MudContainer Class="d-flex justify-center align-center">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            </MudContainer>
        }

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Close"></MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    public MudDateRangePicker dateRangePicker { get; set; }
    public int remainingBalance { get; set; }

    public bool dataLoaded { get; set; }
    public bool loadingVisible { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Perform initialization tasks asynchronously here
        await LoadData();
    }

    private List<VacationRequest> Elements = new List<VacationRequest>();

    async Task Submit()
    {
        var dateRange = dateRangePicker.DateRange;
        if(dateRange != null)
        {
            var request = new VacationRequestDTO
                {
                    StartDate = dateRange.Start.Value,
                    EndDate = dateRange.End.Value,
                    Reason = "System Test"
                };
            var result = await VacationService.RequestVacation(request);

            if (result.Success)
            {
                LoadData();
                AddVacationRequestStateSnackBar(result.Message, Severity.Success);
                Elements.Add(new VacationRequest()
                    {
                        StartDate = dateRange.Start.Value,
                        EndDate = dateRange.End.Value,
                        Reason = "System Test",
                        Status = "Waiting for Approval"

                    });
                dateRangePicker.Clear();
            } else
            {
                AddVacationRequestStateSnackBar(result.Message, Severity.Error);
            }
        }

    }
    void AddVacationRequestStateSnackBar(string message, Severity severity)
    {
        Snackbar.Add(message, severity);
    }
    void Close() => MudDialog.Close();

    private async Task LoadData()
    {
        loadingVisible = true;
        var balance = await VacationService.GetVacationBalance();
        Elements = (await VacationService.GetVacationRequests()).Data;

        remainingBalance = balance.Data.RemainingBalance;
        dataLoaded = true;
        loadingVisible = false;
    }

}


