@page "/DropZoneTest"
@using TeamManager.Shared.DTO
@using TeamManager.Shared.ViewClass

<MudDropContainer T="UserDropItem" Items="_items" ItemsSelector="@((item,dropzone) => item.Identifier == dropzone)" ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
    <ChildContent>
        <MudDropZone T="UserDropItem" Identifier="Drop Zone 1" Class="rounded mud-background-gray pa-6 ma-8 flex-grow-1">
            <MudText Typo="Typo.h6" Class="mb-4">Drop Zone 1</MudText>
        </MudDropZone>
        <MudDropZone T="UserDropItem" Identifier="Drop Zone 2" Class="rounded mud-background-gray pa-6 ma-8 flex-grow-1">
            <MudText Typo="Typo.h6" Class="mb-4">Drop Zone 2</MudText>
        </MudDropZone>
    </ChildContent>
    <ItemRenderer>
        <MudPaper Elevation="25" Class="pa-4 my-4">@context.UserDTO.Email</MudPaper>
    </ItemRenderer>
</MudDropContainer>

@code {
    private List<UserDropItem> _items = new List<UserDropItem>();

    protected override void OnInitialized()
    {
        // Example data for UserDTO
        var user1 = new UserDTO { Id = 1, Email = "John Doe" };
        var user2 = new UserDTO { Id = 2, Email = "Jane Smith" };

        // Example data for UserDropItem
        var dropItem1 = new UserDropItem { UserDTO = user1, Identifier = "Drop Zone 1" };
        var dropItem2 = new UserDropItem { UserDTO = user2, Identifier = "Drop Zone 2" };

        // Add items to the _items list
        _items.Add(dropItem1);
        _items.Add(dropItem2);
    }
    

    private void ItemUpdated(MudItemDropInfo<UserDropItem> dropItem)
    {
        dropItem.Item.Identifier = dropItem.DropzoneIdentifier;
    }

   
}
