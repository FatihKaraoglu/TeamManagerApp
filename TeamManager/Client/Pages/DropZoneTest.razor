@page "/test"
@using TeamManager.Client.Services.DepartmentService
@using TeamManager.Client.Services.UserService
@using TeamManager.Shared.DTO
@using TeamManager.Shared.ViewClass



<MudDropContainer T="UserDropItem" Items="_items" ItemsSelector="@((item,dropzone) => item.Identifier == dropzone)" ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
    <ChildContent>
        <MudDropZone T="UserDropItem" Identifier="Drop Zone 1" Class="rounded mud-background-gray pa-6 ma-8 flex-grow-1">
            <MudText Typo="Typo.h6" Class="mb-4">Drop Zone 1</MudText>
        </MudDropZone>
        <MudDropZone T="UserDropItem" Identifier="IT" Class="rounded mud-background-gray pa-6 ma-8 flex-grow-1">
            <MudText Typo="Typo.h6" Class="mb-4">Drop Zone 2</MudText>
        </MudDropZone>
    </ChildContent>
    <ItemRenderer>
        <MudPaper Elevation="25" Class="pa-4 my-4">@context.UserDTO.Email</MudPaper>
    </ItemRenderer>
</MudDropContainer>
@code {

    protected override async Task OnInitializedAsync()
    {
        
    }

    private void ItemUpdated(MudItemDropInfo<UserDropItem> dropItem)
    {
        dropItem.Item.Identifier = dropItem.DropzoneIdentifier;
    }

    private List<UserDropItem> _items = new()
    {
        new UserDropItem( new UserDTO (0, "Hans"), "Drop Zone 1"),
        new UserDropItem( new UserDTO (1, "Albert"), "Drop Zone 1"),
        new UserDropItem( new UserDTO (2, "Hannes"), "Drop Zone 1"),
    };

    public class DropItem
    {
        public string Name { get; init; }
        public string Identifier { get; set; }
    }
}