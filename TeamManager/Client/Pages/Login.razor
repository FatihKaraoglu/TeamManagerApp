@page "/login"
@using Microsoft.AspNetCore.WebUtilities
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Login</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudCard Class="m-4" Rounded="true">
    <MudCardHeader>
            <CardHeaderAvatar >
                <MudAvatar Color="Color.Dark">
                <MudIcon Icon="@Icons.Material.Filled.Person"  />
            </MudAvatar>
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudText Typo="Typo.h5" Color="Color.Dark">Login</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudForm Model="user" OnValidSubmit="HandleLogin">
            <MudItem>
                <MudTextField @bind-Value="user.Email" Label="Email" Required="true" />
                <MudFormValidator/>
            </MudItem>
            <MudItem>
                <MudTextField @bind-Value="user.Password" Label="Password" Required="true" Type="InputType.Password" />
                <MudFormValidator/>
            </MudItem>
            <MudItem Class="mt-3">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleLogin" >Login</MudButton>
                
            </MudItem>
        </MudForm>
    </MudCardContent>
</MudCard>
<MudTypography Typo="TypoStyle.Body2" Class="text-danger">
    <span>@errorMessage</span>
</MudTypography>
</MudContainer>



@code {
    private UserLogin user = new UserLogin();

    private string errorMessage = string.Empty;

    private string returnUrl = string.Empty;

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;
        }
    }

    private async Task HandleLogin()
    {
        var result = await AuthService.Login(user);
        if (result.Success)
        {
            errorMessage = string.Empty;

            await LocalStorage.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo(returnUrl);
        }
        else
        {
            errorMessage = result.Message;
        }
    }
}
